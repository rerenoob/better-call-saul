@page "/account/login"
@using better_call_saul.Models.ViewModels
@using better_call_saul.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@inject NavigationManager Navigation
@inject SignInManager<ApplicationUser> SignInManager

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" id="email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>
    
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" id="password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    
    <div class="mb-3 form-check">
        <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" id="rememberMe" />
        <label class="form-check-label" for="rememberMe">Remember me</label>
    </div>
    
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="visually-hidden">Loading...</span>
        }
        Login
    </button>
    
    <div class="mt-3">
        <a href="/account/forgot-password" class="text-decoration-none">Forgot your password?</a>
    </div>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
</EditForm>

@code {
    private LoginViewModel loginModel = new();
    private bool isLoading = false;
    private string? errorMessage;
    
    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            var result = await SignInManager.PasswordSignInAsync(
                loginModel.Email, 
                loginModel.Password, 
                loginModel.RememberMe, 
                lockoutOnFailure: false);
                
            if (result.Succeeded)
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                errorMessage = "Invalid login attempt.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during login.";
        }
        finally
        {
            isLoading = false;
        }
    }
}