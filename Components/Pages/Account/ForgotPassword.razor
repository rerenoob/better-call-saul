@page "/account/forgot-password"
@using better_call_saul.Models.ViewModels
@using better_call_saul.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@using better_call_saul.Services
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject IEmailService EmailService

<h3>Forgot Password</h3>

<EditForm Model="@forgotPasswordModel" OnValidSubmit="@HandleForgotPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText @bind-Value="forgotPasswordModel.Email" class="form-control" id="email" />
        <ValidationMessage For="@(() => forgotPasswordModel.Email)" />
    </div>
    
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="visually-hidden">Loading...</span>
        }
        Send Reset Instructions
    </button>
    
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3" role="alert">
            @successMessage
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
</EditForm>

<div class="mt-3">
    <a href="/account/login" class="text-decoration-none">Back to Login</a>
</div>

@code {
    private ForgotPasswordViewModel forgotPasswordModel = new();
    private bool isLoading = false;
    private string? successMessage;
    private string? errorMessage;
    
    private async Task HandleForgotPassword()
    {
        isLoading = true;
        successMessage = null;
        errorMessage = null;
        
        try
        {
            var user = await UserManager.FindByEmailAsync(forgotPasswordModel.Email);
            
            if (user != null)
            {
                // Generate password reset token
                var token = await UserManager.GeneratePasswordResetTokenAsync(user);
                
                // URL encode the token for safety
                var encodedToken = Uri.EscapeDataString(token);
                
                // Build reset link
                var resetLink = $"{Navigation.BaseUri}account/reset-password?userId={user.Id}&token={encodedToken}";
                
                // Send email (console output for MVP)
                await EmailService.SendPasswordResetEmailAsync(user.Email!, resetLink);
                
                successMessage = "If an account with that email exists, password reset instructions have been sent.";
            }
            else
            {
                // For security, don't reveal whether the email exists
                successMessage = "If an account with that email exists, password reset instructions have been sent.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while processing your request.";
        }
        finally
        {
            isLoading = false;
        }
    }
}