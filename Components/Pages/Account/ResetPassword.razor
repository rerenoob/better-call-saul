@page "/account/reset-password"
@using better_call_saul.Models.ViewModels
@using better_call_saul.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager

<h3>Reset Password</h3>

<EditForm Model="@resetPasswordModel" OnValidSubmit="@HandleResetPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label for="password" class="form-label">New Password</label>
        <InputText @bind-Value="resetPasswordModel.Password" type="password" class="form-control" id="password" />
        <ValidationMessage For="@(() => resetPasswordModel.Password)" />
    </div>
    
    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm New Password</label>
        <InputText @bind-Value="resetPasswordModel.ConfirmPassword" type="password" class="form-control" id="confirmPassword" />
        <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" />
    </div>
    
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="visually-hidden">Loading...</span>
        }
        Reset Password
    </button>
    
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3" role="alert">
            @successMessage
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
</EditForm>

@code {
    private ResetPasswordViewModel resetPasswordModel = new();
    private bool isLoading = false;
    private string? successMessage;
    private string? errorMessage;
    
    [Parameter, SupplyParameterFromQuery]
    public string? UserId { get; set; }
    
    [Parameter, SupplyParameterFromQuery]
    public string? Token { get; set; }
    
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(UserId) && !string.IsNullOrEmpty(Token))
        {
            resetPasswordModel.UserId = UserId;
            resetPasswordModel.Token = Uri.UnescapeDataString(Token);
        }
    }
    
    private async Task HandleResetPassword()
    {
        isLoading = true;
        successMessage = null;
        errorMessage = null;
        
        try
        {
            if (string.IsNullOrEmpty(resetPasswordModel.UserId) || string.IsNullOrEmpty(resetPasswordModel.Token))
            {
                errorMessage = "Invalid reset link. Please request a new password reset.";
                return;
            }
            
            var user = await UserManager.FindByIdAsync(resetPasswordModel.UserId);
            
            if (user == null)
            {
                errorMessage = "Invalid reset link. Please request a new password reset.";
                return;
            }
            
            // Reset the password
            var result = await UserManager.ResetPasswordAsync(user, resetPasswordModel.Token, resetPasswordModel.Password);
            
            if (result.Succeeded)
            {
                successMessage = "Your password has been reset successfully. You can now login with your new password.";
                
                // Sign out any existing sessions for security
                await UserManager.UpdateSecurityStampAsync(user);
            }
            else
            {
                errorMessage = "Failed to reset password. The reset link may have expired or been used already.";
                
                foreach (var error in result.Errors)
                {
                    if (error.Code == "InvalidToken")
                    {
                        errorMessage = "The reset link has expired or is invalid. Please request a new password reset.";
                        break;
                    }
                }
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while resetting your password.";
        }
        finally
        {
            isLoading = false;
        }
    }
}