@page "/account/register"
@using better_call_saul.Models
@using better_call_saul.Models.ViewModels
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="firstName" class="form-label">First Name</label>
            <InputText @bind-Value="registerModel.FirstName" class="form-control" id="firstName" />
            <ValidationMessage For="@(() => registerModel.FirstName)" />
        </div>
        
        <div class="col-md-6 mb-3">
            <label for="lastName" class="form-label">Last Name</label>
            <InputText @bind-Value="registerModel.LastName" class="form-control" id="lastName" />
            <ValidationMessage For="@(() => registerModel.LastName)" />
        </div>
    </div>
    
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText @bind-Value="registerModel.Email" class="form-control" id="email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>
    
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText @bind-Value="registerModel.Password" type="password" class="form-control" id="password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>
    
    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control" id="confirmPassword" />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>
    
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="visually-hidden">Loading...</span>
        }
        Register
    </button>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
    
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3" role="alert">
            @successMessage
        </div>
    }
</EditForm>

@code {
    private RegisterViewModel registerModel = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;
    
    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;
        
        try
        {
            var user = new ApplicationUser
            {
                UserName = registerModel.Email,
                Email = registerModel.Email,
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                CreatedAt = DateTime.UtcNow
            };
            
            var result = await UserManager.CreateAsync(user, registerModel.Password);
            
            if (result.Succeeded)
            {
                await SignInManager.SignInAsync(user, isPersistent: false);
                successMessage = "Registration successful! You are now logged in.";
                
                // Redirect after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/", true);
            }
            else
            {
                errorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during registration.";
        }
        finally
        {
            isLoading = false;
        }
    }
}