@page "/test-upload"
@using better_call_saul.Models
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Test File Upload Component</h3>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>File Upload Test</h5>
                </div>
                <div class="card-body">
                    <FileUploadComponent UserId="@_userId" OnUploadCompleted="HandleUploadCompleted" />
                </div>
            </div>
        </div>
    </div>

    @if (_lastUploadResult != null)
    {
        <div class="row mt-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5>Upload Result</h5>
                    </div>
                    <div class="card-body">
                        @if (_lastUploadResult.Success)
                        {
                            <div class="alert alert-success">
                                <strong>Success!</strong> File uploaded successfully.
                                <br />
                                <small>File: @_lastUploadResult.OriginalFileName</small>
                                <br />
                                <small>Size: @(_lastUploadResult.FileSize / 1024) KB</small>
                                <br />
                                <small>Path: @_lastUploadResult.FilePath</small>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger">
                                <strong>Error!</strong> @_lastUploadResult.ErrorMessage
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string _userId = "test-user"; // Default test user ID
    private FileUploadResult? _lastUploadResult;

    protected override async Task OnInitializedAsync()
    {
        // In a real application, you would get the actual user ID
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // _userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "anonymous";
    }

    private void HandleUploadCompleted(FileUploadResult result)
    {
        _lastUploadResult = result;
        StateHasChanged();
    }
}