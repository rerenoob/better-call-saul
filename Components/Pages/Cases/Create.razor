@page "/cases/new"
@using better_call_saul.Models.ViewModels
@using better_call_saul.Models
@using better_call_saul.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@inject ICaseService CaseService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILoggerService LoggerService

<EditForm Model="@createModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="/cases">Cases</a></li>
                                <li class="breadcrumb-item active" aria-current="page">New Case</li>
                            </ol>
                        </nav>
                        <h1 class="h2 mb-0">Create New Case</h1>
                    </div>
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Case Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="title" class="form-label">Title *</label>
                            <InputText id="title" class="form-control" @bind-Value="createModel.Title" />
                            <ValidationMessage For="@(() => createModel.Title)" />
                            @if (createErrors.ContainsKey("Title"))
                            {
                                <div class="invalid-feedback">@createErrors["Title"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" rows="4" @bind-Value="createModel.Description" />
                            <div class="form-text">Brief description of the case (max 1000 characters)</div>
                            <ValidationMessage For="@(() => createModel.Description)" />
                        </div>

                        <div class="mb-4">
                            <label for="status" class="form-label">Status</label>
                            <InputSelect id="status" class="form-select" @bind-Value="createModel.Status">
                                <option value="@CaseStatus.New">New</option>
                                <option value="@CaseStatus.InReview">In Review</option>
                                <option value="@CaseStatus.NeedsMoreInfo">Needs More Info</option>
                                <option value="@CaseStatus.Completed">Completed</option>
                                <option value="@CaseStatus.Closed">Closed</option>
                            </InputSelect>
                        </div>

                        <div class="d-flex gap-2 justify-content-end">
                            <button type="button" class="btn btn-outline-secondary" @onclick="CancelCreate">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <i class="bi bi-plus-circle me-1"></i>
                                }
                                Create Case
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private CaseViewModel createModel = new();
    private bool isSubmitting = false;
    private Dictionary<string, string> createErrors = new();

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        createErrors.Clear();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    var newCase = await CaseService.CreateCaseAsync(createModel, userId);
                    if (newCase != null)
                    {
                        Navigation.NavigateTo($"/cases/{newCase.Id}", forceLoad: true);
                    }
                    else
                    {
                        createErrors["General"] = "Failed to create case. Please try again.";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            LoggerService.LogError($"Error creating case: {ex.Message}");
            createErrors["General"] = "An error occurred while creating the case.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        // Validation errors will be shown by ValidationSummary and ValidationMessage components
    }

    private void CancelCreate()
    {
        Navigation.NavigateTo("/cases");
    }
}