@page "/cases/{caseId:int}/edit"
@using better_call_saul.Models
@using better_call_saul.Models.ViewModels
@using better_call_saul.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@inject ICaseService CaseService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILoggerService LoggerService

<EditForm Model="@editModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading case...</p>
            </div>
        }
        else if (caseEntity == null)
        {
            <div class="text-center py-5">
                <div class="text-muted mb-3">
                    <i class="bi bi-exclamation-triangle" style="font-size: 3rem;"></i>
                </div>
                <h4 class="text-muted">Case not found</h4>
                <p class="text-muted">The requested case could not be found or you don't have permission to edit it.</p>
                <a href="/cases" class="btn btn-primary">
                    <i class="bi bi-arrow-left me-1"></i>Back to Cases
                </a>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div>
                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb">
                                    <li class="breadcrumb-item"><a href="/cases">Cases</a></li>
                                    <li class="breadcrumb-item"><a href="/cases/@caseEntity.Id">@caseEntity.Title</a></li>
                                    <li class="breadcrumb-item active" aria-current="page">Edit</li>
                                </ol>
                            </nav>
                            <h1 class="h2 mb-0">Edit Case</h1>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Case Information</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="title" class="form-label">Title *</label>
                                <InputText id="title" class="form-control" @bind-Value="editModel.Title" />
                                <ValidationMessage For="@(() => editModel.Title)" />
                                @if (editErrors.ContainsKey("Title"))
                                {
                                    <div class="invalid-feedback">@editErrors["Title"]</div>
                                }
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" rows="4" @bind-Value="editModel.Description" />
                                <div class="form-text">Brief description of the case (max 1000 characters)</div>
                                <ValidationMessage For="@(() => editModel.Description)" />
                            </div>

                            <div class="mb-4">
                                <label for="status" class="form-label">Status</label>
                                <InputSelect id="status" class="form-select" @bind-Value="editModel.Status">
                                    <option value="@CaseStatus.New">New</option>
                                    <option value="@CaseStatus.InReview">In Review</option>
                                    <option value="@CaseStatus.NeedsMoreInfo">Needs More Info</option>
                                    <option value="@CaseStatus.Completed">Completed</option>
                                    <option value="@CaseStatus.Closed">Closed</option>
                                </InputSelect>
                            </div>

                            <div class="d-flex gap-2 justify-content-end">
                                <button type="button" class="btn btn-outline-secondary" @onclick="CancelEdit">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-check-circle me-1"></i>
                                    }
                                    Save Changes
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public int CaseId { get; set; }

    private Case? caseEntity;
    private CaseViewModel editModel = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private Dictionary<string, string> editErrors = new();

    protected override async Task OnParametersSetAsync()
    {
        if (CaseId <= 0)
        {
            isLoading = false;
            return;
        }

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    caseEntity = await CaseService.GetCaseByIdAsync(CaseId, userId);
                    if (caseEntity != null)
                    {
                        editModel = new CaseViewModel
                        {
                            Title = caseEntity.Title,
                            Description = caseEntity.Description,
                            Status = caseEntity.Status
                        };
                    }
                }
            }
        }
        catch (Exception ex)
        {
            LoggerService.LogError($"Error loading case for edit: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (caseEntity == null) return;

        isSubmitting = true;
        editErrors.Clear();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                var success = await CaseService.UpdateCaseAsync(CaseId, editModel, userId);
                if (success)
                {
                    Navigation.NavigateTo($"/cases/{CaseId}", forceLoad: true);
                }
                else
                {
                    editErrors["General"] = "Failed to update case. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            LoggerService.LogError($"Error updating case: {ex.Message}");
            editErrors["General"] = "An error occurred while updating the case.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        // Validation errors will be shown by ValidationSummary and ValidationMessage components
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo($"/cases/{CaseId}");
    }
}