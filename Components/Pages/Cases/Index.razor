@page "/cases"
@using better_call_saul.Models.ViewModels
@using better_call_saul.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@inject ICaseService CaseService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILoggerService LoggerService

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="h2 mb-0">Case Dashboard</h1>
                <a href="/cases/new" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-1"></i>Add New Case
                </a>
            </div>
        </div>
    </div>

    <!-- Dashboard Summary -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 text-center">
                            <h3 class="text-primary mb-0">@(caseList?.TotalCases ?? 0)</h3>
                            <small class="text-muted">Total Cases</small>
                        </div>
                        @if (caseList?.StatusCounts != null)
                        {
                            <div class="col-md-9">
                                <div class="d-flex flex-wrap gap-3">
                                    @foreach (var statusCount in caseList.StatusCounts)
                                    {
                                        <div class="text-center">
                                            <h4 class="mb-0">@statusCount.Value</h4>
                                            <small class="text-muted">@statusCount.Key.ToString()</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cases List -->
    <div class="row">
        <div class="col-12">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading cases...</p>
                </div>
            }
            else if (caseList?.Cases?.Any() == true)
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    @foreach (var caseSummary in caseList.Cases)
                    {
                        <div class="col">
                            <CaseCard Case="@caseSummary" OnCaseSelected="NavigateToCaseDetail" />
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="text-muted mb-3">
                        <i class="bi bi-folder-x" style="font-size: 3rem;"></i>
                    </div>
                    <h4 class="text-muted">No cases yet</h4>
                    <p class="text-muted">Get started by adding your first case.</p>
                    <a href="/cases/new" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-1"></i>Add Your First Case
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private CaseListViewModel? caseList;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    caseList = await CaseService.GetUserCaseListAsync(userId);
                }
            }
        }
        catch (Exception ex)
        {
            LoggerService.LogError($"Error loading cases: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCaseDetail(int caseId)
    {
        Navigation.NavigateTo($"/cases/{caseId}");
    }
}