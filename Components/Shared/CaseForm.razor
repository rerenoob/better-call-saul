@using better_call_saul.Models.ViewModels
@using better_call_saul.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="@Model" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
    <DataAnnotationsValidator />
    
    <div class="mb-3">
        <label for="title" class="form-label">Title *</label>
        <InputText id="title" class="form-control" @bind-Value="Model.Title" />
        <ValidationMessage For="@(() => Model.Title)" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" rows="4" @bind-Value="Model.Description" />
        <div class="form-text">Brief description of the case (max 1000 characters)</div>
        <ValidationMessage For="@(() => Model.Description)" />
    </div>

    <div class="mb-4">
        <label for="status" class="form-label">Status</label>
        <InputSelect id="status" class="form-select" @bind-Value="Model.Status">
            <option value="@CaseStatus.New">New</option>
            <option value="@CaseStatus.InReview">In Review</option>
            <option value="@CaseStatus.NeedsMoreInfo">Needs More Info</option>
            <option value="@CaseStatus.Completed">Completed</option>
            <option value="@CaseStatus.Closed">Closed</option>
        </InputSelect>
    </div>

    <div class="d-flex gap-2 justify-content-end">
        <button type="button" class="btn btn-outline-secondary" @onclick="@OnCancel">
            Cancel
        </button>
        <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
            @if (IsSubmitting)
            {
                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
            }
            else
            {
                <i class="bi @SubmitIcon me-1"></i>
            }
            @SubmitButtonText
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public CaseViewModel Model { get; set; } = new();
    
    [Parameter]
    public EventCallback<EditContext> OnValidSubmit { get; set; }
    
    [Parameter]
    public EventCallback<EditContext> OnInvalidSubmit { get; set; }
    
    [Parameter]
    public EventCallback OnCancel { get; set; }
    
    [Parameter]
    public bool IsSubmitting { get; set; }
    
    [Parameter]
    public string SubmitButtonText { get; set; } = "Save";
    
    [Parameter]
    public string SubmitIcon { get; set; } = "bi-check-circle";
}