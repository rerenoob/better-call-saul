@using Microsoft.AspNetCore.Components.Forms
@using better_call_saul.Services
@using better_call_saul.Models
@inject IDocumentService DocumentService
@inject ILoggerService LoggerService

<div class="file-upload-component">
    <InputFile OnChange="HandleFileSelected" 
               accept="@(_supportedTypes)" 
               class="file-input" />
    
    <div class="drop-zone @(_isDragOver ? "drag-over" : "")" 
         @ondragenter="HandleDragEnter"
         @ondragleave="HandleDragLeave"
         @ondragover="HandleDragOver"
         @ondrop="HandleDrop">
        <div class="drop-zone-content">
            <i class="bi bi-cloud-upload"></i>
            <h5>Drag & drop your document here</h5>
            <p class="text-muted">or</p>
            <button class="btn btn-outline-primary" @onclick="TriggerFileInput">
                Browse Files
            </button>
            <p class="text-muted small mt-2">
                Supports @(_supportedTypesDisplay). Max file size: 10MB
            </p>
        </div>
    </div>

    @if (_selectedFile != null)
    {
        <div class="file-preview mt-3">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">@_selectedFile.Name</h6>
                            <p class="card-text text-muted small mb-0">
                                @(_selectedFile.Size / 1024) KB
                            </p>
                        </div>
                        <button class="btn btn-sm btn-outline-danger" @onclick="ClearSelection">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (_isUploading)
    {
        <div class="upload-progress mt-3">
            <div class="progress">
                <div class="progress-bar" role="progressbar" 
                     style="width: @(_uploadProgress)%" 
                     aria-valuenow="@_uploadProgress" 
                     aria-valuemin="0" 
                     aria-valuemax="100">
                    @_uploadProgress%
                </div>
            </div>
            <p class="text-center small mt-1">Uploading...</p>
        </div>
    }

    @if (_uploadResult != null)
    {
        <div class="upload-result mt-3">
            @if (_uploadResult.Success)
            {
                <div class="alert alert-success">
                    <i class="bi bi-check-circle"></i>
                    File uploaded successfully!
                </div>
            }
            else
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-circle"></i>
                    @_uploadResult.ErrorMessage
                </div>
            }
        </div>
    }

    @if (_selectedFile != null && !_isUploading && (_uploadResult == null || !_uploadResult.Success))
    {
        <div class="upload-actions mt-3">
            <button class="btn btn-primary" @onclick="UploadFile" disabled="@_isUploading">
                <i class="bi bi-upload"></i>
                Upload Document
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    [Parameter] public EventCallback<FileUploadResult> OnUploadCompleted { get; set; }

    private IBrowserFile? _selectedFile;
    private bool _isDragOver = false;
    private bool _isUploading = false;
    private int _uploadProgress = 0;
    private FileUploadResult? _uploadResult;
    private string _supportedTypes = ".pdf,.docx";
    private string _supportedTypesDisplay = "PDF and DOCX";

    private void TriggerFileInput()
    {
        // This will trigger the hidden file input
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        await ProcessFileSelection(file);
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        _isDragOver = true;
        e.DataTransfer.DropEffect = "copy";
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        _isDragOver = false;
    }

    private void HandleDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "copy";
        _isDragOver = true;
    }

    private void HandleDrop(DragEventArgs e)
    {
        _isDragOver = false;
        
        // For drag and drop, we'll rely on the hidden file input
        // This is a simpler approach that avoids JS interop complexity
    }

    private async Task ProcessFileSelection(IBrowserFile file)
    {
        _uploadResult = null;
        
        // Validate file
        var validationResult = await DocumentService.ValidateFileAsync(file);
        if (!validationResult.IsValid)
        {
            _uploadResult = new FileUploadResult
            {
                Success = false,
                ErrorMessage = validationResult.ErrorMessage ?? "Invalid file. Please select a supported file type under the size limit."
            };
            return;
        }

        _selectedFile = file;
    }

    private void ClearSelection()
    {
        _selectedFile = null;
        _uploadResult = null;
    }

    private async Task UploadFile()
    {
        if (_selectedFile == null || string.IsNullOrEmpty(UserId))
            return;

        _isUploading = true;
        _uploadProgress = 0;
        _uploadResult = null;

        try
        {
            // Simulate progress (in real implementation, this would be based on actual upload progress)
            var progressTimer = new System.Timers.Timer(100);
            progressTimer.Elapsed += (s, e) =>
            {
                if (_uploadProgress < 100)
                {
                    _uploadProgress += 5;
                    InvokeAsync(StateHasChanged);
                }
                else
                {
                    progressTimer.Stop();
                    progressTimer.Dispose();
                }
            };
            progressTimer.Start();

            // Perform actual upload
            var result = await DocumentService.UploadDocumentAsync(_selectedFile, UserId);
            _uploadResult = result;

            // Ensure progress reaches 100%
            _uploadProgress = 100;
            await InvokeAsync(StateHasChanged);

            // Notify parent component
            if (OnUploadCompleted.HasDelegate)
            {
                await OnUploadCompleted.InvokeAsync(result);
            }

            LoggerService.LogInformation($"File upload completed: {result.Success}");
        }
        catch (Exception ex)
        {
            _uploadResult = new FileUploadResult
            {
                Success = false,
                ErrorMessage = ex.Message
            };
            LoggerService.LogError($"File upload error: {ex.Message}");
        }
        finally
        {
            _isUploading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}